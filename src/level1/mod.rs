/* Level 1 : Problem 1 ~ Problem 25 */

extern crate regex;
extern crate num;

use self::regex::Regex;
use self::num::BigUint;


// Problem 1: the sum of all the multiples of 3 or 5

// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
 // The sum of these multiples is 23.
//
// Find the sum of all the multiples of 3 or 5 below 1000.

pub fn multiples_3_and_5_sum(n: i64) -> i64 {
    let mut v = vec![];
    for i in 1..n {
        if i % 3 == 0 || i % 5 == 0 {
            // println!("{:?}", i);
            v.push(i);
        }
    }
    v.iter().sum()
}


// Problem 2: Even Fibonacci numbers

// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 // By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

// 递归版本 （时间复杂度 O(2^n)，非常慢）
fn fib_recursion(n: i64) -> i64 {
    if n < 0 {
        panic!("{} is negative!", n);
    }
    match n {
        0 => panic!("zero is not a right argument to fib()!"),
        1 => 1,
        2 => 2,
        _ => fib_recursion(n - 1) + fib_recursion(n - 2),
    }
}

// 动态规划(由自顶向下递归改为自底向上迭代： 时间复杂度O(n))
pub fn fib(mut n: i64) -> i64 {
    let mut f = 0;
    let mut g = 1;
    while n > 0 {
        g = g + f;
        f = g - f;
        n -= 1;
    }
    g
}

pub fn even_fib_nums(n: i64) -> i64 {
    let mut v = vec![];

    if fib(n) > 4000000 {
        panic!("{} is out of range!", n);
    }

    for i in 1..n + 1 {
        let fib_v = fib(i);
        match fib_v % 2 == 0 {
            true => v.push(fib_v),
            _ => (),
        }
    }
    v.iter().sum()
}

// problem3 : Largest prime factor
// 质因数（素因数或质因子）在数论里是指能整除给定正整数的质数

// The prime factors of 13195 are 5, 7, 13 and 29.
//
// What is the largest prime factor of the number 600851475143 ?

fn prime_factors(mut n: i64) -> Vec<i64> {
    let mut v = vec![];

    if n < 2 {
        v
    } else {
        let mut i = 2;
        while i <= n {
            while n % i == 0 {
                n = n / i;
                v.push(i);
            }
            i = i + 1;
        }
        v
    }
}

pub fn max_prime_factors(n: i64) -> i64 {
    let v = prime_factors(n);
    *v.iter().max().unwrap()
}

// Problem 4: Largest palindrome product 最大回文数字积

// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
//
// Find the largest palindrome made from the product of two 3-digit numbers.

fn is_palindrome(num: u64) -> bool {
    let s: String = num.to_string();
    let rev_s: String = s.chars().rev().collect::<String>();
    s == rev_s
}

pub fn max_palindrome() -> u64 {
    let mut v = vec![];
    for i in 100..1000 {
        for j in 100..1000 {
            let product = i * j;
            if is_palindrome(product) {
                v.push(product);
            }
        }
    }
    *v.iter().max().unwrap()
}

// Problem 5: Smallest multiple

// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
//
// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

// 纯遍历性能很差
pub fn smallest_multiple() -> usize {
    let mut n: usize = 2520;

    let mut min = 0;
    while min == 0 {
        let mut v: [bool; 20] = [true; 20];
        for i in 1..21 {
            if n % i != 0 {
                v[i-1] = false;
            }
        }
        if v.contains(&false) {
            println!("n: {}", n);
            n = n+1
        }else{
            min = n;
            println!("min: {}", min);
        }
    }
    min
}

// 优化：求几个数的最小公倍数。
// 一个整数要能被1-10的所有整数整除，那么就等同于他能被1-10之间的所有素数整除

// 欧几里德算法求两个数的最大公约数
fn gcd(a: u32, b: u32) -> u32 {
    if b == 0 { a } else { gcd(b, a % b) }
}

// 求多个数的最大公约数
fn mult_gcd(v: Vec<u32>) -> u32 {
    let a = v[0];
    let b = v[1];
    let mut c = gcd(a, b);
    for i in 0..v.len() {
        c = gcd(c, v[i]);
    }
    c
}

// 最小公倍数
pub fn lcm(v: Vec<u32>) -> u32 {
    let mut x = v[0];
    let mut y = v[1];
    let mut num = gcd(x, y);

    for i in 0..v.len() {
        x = num;
        y = v[i];
        let _gcd = gcd(x, y);
        num = x / _gcd * y / _gcd * _gcd;
    }
    num
}

// Problem6: Sum square difference

// The sum of the squares of the first ten natural numbers is,
//
// 1^2 + 2^2 + ... + 10^2 = 385
// The square of the sum of the first ten natural numbers is,
//
// (1 + 2 + ... + 10)^2 = 55^2 = 3025
// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
//
// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

fn square(n: u64) -> u64 {
    n * n
}

pub fn sum_square_diff(n: u64) -> u64 {
    let sum_square = square((1..n + 1).sum());
    println!("{:?}", sum_square);
    let square_sum: u64 = (1..n + 1).map(|i| square(i)).sum();
    println!("{:?}", square_sum);
    sum_square - square_sum
}

// Problem7 : 10001st prime

// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13,
// we can see that the 6th prime is 13.
//
// What is the 10001st prime number?

// 估算素数分布，素数定理： x范围内存在x/ln(x) 个素数，误差范围在0.922087
fn prime_distribution(x: f64) -> u64{
    // 1_000_000范围内有 78498个素数
    // 求第10_001个素数，大概在自然数127405内
    let num = x/x.ln();
    (num/0.922087) as u64
}

// 判断是否为素数：
// 判断小于等于一个数的平方的所有大于1的整数是不是能整除这个数，
//              如果能，则表明这个数不是素数；反之，则是素数
fn is_prime(x: usize) -> bool {
    let m = (x as f64).sqrt() as usize;
    let mut r = true;
    if x < 2{
        r = false
    }else{
        for i in 2..m+1{
            if x % i == 0{
                r = false
            }
        }
    }
    r
}
// 试除法
pub fn primes(count: usize, nth: usize) -> usize{

    let mut primes = vec![];
    primes.push(2);
    let mut pc = 1;
    let mut m = 3;
    while pc < count {
        let mut k = 0;
        while primes[k] * primes[k] <= m {
            if m % primes[k] == 0 {
                m += 2;
                k = 1;
            }else{
                k += 1;
            }
        }
        pc += 1;
        primes.push(m);
        m += 2;
    }
    primes[nth-1]
}

// 筛选法：
// 找出小于等于n的开方的素数，然后将n内所有这些素数的倍数统统去掉，剩下的数就都是素数
pub fn primes_opt(n: usize, nth: usize) -> usize {
    let mut vec = vec![true; n];
    let mut result = vec![];
    let sqrt_n = (n as f64).sqrt() as usize;
    vec[0] = false;
    vec[1] = false;

    for i in 2..sqrt_n+1{
        if vec[i] && is_prime(i) {
            let mut c = 2;
            let mut j = i*c;
            while j < n {
                vec[j] = false;
                c += 1;
                j = i*c;
            }
        }
    }

    for i in 0..vec.len(){
        if vec[i] { result.push(i) }
    }
    result[nth-1]
}

pub fn primes_opt_all(n: usize) -> Vec<usize> {
    let mut vec = vec![true; n];
    let mut result = vec![];
    let sqrt_n = (n as f64).sqrt() as usize;
    vec[0] = false;
    vec[1] = false;

    for i in 2..sqrt_n+1{
        if vec[i] && is_prime(i) {
            let mut c = 2;
            let mut j = i*c;
            while j < n {
                vec[j] = false;
                c += 1;
                j = i*c;
            }
        }
    }

    for i in 0..vec.len(){
        if vec[i] { result.push(i) }
    }
    result
}

// Problem 8 : Largest product in a series
// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.


//                        73167176531330624919225119674426574742355349194934
//                        96983520312774506326239578318016984801869478851843
//                        85861560789112949495459501737958331952853208805511
//                        12540698747158523863050715693290963295227443043557
//                        66896648950445244523161731856403098711121722383113
//                        62229893423380308135336276614282806444486645238749
//                        30358907296290491560440772390713810515859307960866
//                        70172427121883998797908792274921901699720888093776
//                        65727333001053367881220235421809751254540594752243
//                        52584907711670556013604839586446706324415722155397
//                        53697817977846174064955149290862569321978468622482
//                        83972241375657056057490261407972968652414535100474
//                        82166370484403199890008895243450658541227588666881
//                        16427171479924442928230863465674813919123162824586
//                        17866458359124566529476545682848912883142607690042
//                        24219022671055626321111109370544217506941658960408
//                        07198403850962455444362981230987879927244284909188
//                        84580156166097919133875499200524063689912560717606
//                        05886116467109405077541002256983155200055935729725
//                        71636269561882670428252483600823257530420752963450

// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
// What is the value of this product?
static DIGIT1000_NUMBER: &'static str = r#"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"#;

pub fn largest_product(top: usize) -> u64 {
    let letters = DIGIT1000_NUMBER.chars().collect::<Vec<_>>();
    let mut max = 0;
    for i in 0..988 {
        let temp = &letters[i..i+top];
        let r:u64 = temp.iter().map(|&i| i.to_digit(10).unwrap() ).fold(1, |s, i| s* (i as u64));
        if r > max { max = r}
    }
    max
}


// Problem 9 : Special Pythagorean triplet 毕达哥拉斯三元组

// A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
//
// a^2 + b^2 = c^2
// For example, 32 + 42 = 9 + 16 = 25 = 52.
//
// There exists exactly one Pythagorean triplet for which a + b + c = 1000.
// Find the product abc.

// 公约数
fn gcd_other(mut a: u64, mut b: u64) -> u64 {
    if a < b {
        a = b;
        b = a;
    }

    while a % b != 0 {
        let temp = a;
        a = b;
        b = temp % a;
    }
    b
}

pub fn pythagorean_triplet() -> (u64, u64, u64) {
    let mut a = 0;
    let mut b = 0;
    let mut c = 0;

    let s = 1000;
    let mut k : u64;
    let mut n : u64;
    let mut d : u64;

    let mlimit: u64 = ((s/2) as f64).sqrt() as u64;

    for m in 2..mlimit+1{
        let half_s = s/2.0 as u64;
        if half_s % m == 0 {
            if m % 2 == 0 {
                k = m + 1;
            } else {
                k = m + 2;
            }
            let mhalf_s = s / (2 * m) as u64;
            while k < 2 * m && k <= mhalf_s{
                if mhalf_s % k == 0 && gcd_other(k, m) == 1 {
                    d = s / 2/ (k*m) as u64;
                    n = k - m ;
                    a = d * (m * m - n * n);
                    b = 2 * d * n * m;
                    c = d * (m * m + n * n);
                }
                k += 2;
            }
        }
    }

    (a, b, c)

}


pub fn pythagorean_triplet_product() -> u64 {
    let result = pythagorean_triplet();
    result.0 * result.1 * result.2
}

// Problem 10 ： Summation of primes
// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
//
// Find the sum of all the primes below two million.

pub fn sum_of_primes(n: usize) -> usize {
    primes_opt_all(n).iter().sum()
}

// Problem 11: Largest product in a grid

// In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

// (26 63 78 14)

// The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
//
// What is the greatest product of four adjacent numbers in the same direction
// (up, down, left, right, or diagonally) in the 20×20 grid?

pub fn regex_replace() {
    let str = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";

    let re1 = Regex::new(r" ").unwrap();
    let result = re1.replace_all(str, ",");
    println!("{:?}", result);
}

// 可以把vector分组为一个二维数组
// let mut v = [1,2,3,4,5,6,7,8,9];
// let r = group_by(&v, 2);
// 官方提供类似方法： chunks()
// let slice = ['l', 'o', 'r', 'e', 'm'];
// let mut iter: Vec<_> = slice.chunks(2).collect();
// println!("{:?}", iter);

fn group_by<'a> (v: &'a [u64], n: usize) -> Vec<&'a[u64]>{
    let mut new_v = vec![];
    group(new_v, v, n)
}

fn group<'a> (mut r:  Vec<&'a[u64]>, v: &'a [u64], n: usize) -> Vec<&'a[u64]>{
    if v.len() <= n  {
        r.push(v);
        r
    }
    else{
        r.push(v.split_at(n).0);
        group(r, v.split_at(n).1, n)
    }
}
//  思路：
//                                •  •  •  •
//                             •  •  •
//                           •    •     •
//                         •      •        •

pub fn largest_product_11() -> u64 {

    let str = "08,02,22,97,38,15,00,40,00,75,04,05,07,78,52,12,50,77,91,08,49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,04,56,62,00,81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,03,49,13,36,65,52,70,95,23,04,60,11,42,69,24,68,56,01,32,56,71,37,02,36,91,22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80,24,47,32,60,99,03,45,02,44,75,33,53,78,36,84,20,35,17,12,50,32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70,67,26,20,68,02,62,12,20,95,63,94,39,63,08,40,91,66,49,94,21,24,55,58,05,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72,21,36,23,09,75,00,76,44,20,45,35,14,00,61,33,97,34,31,33,95,78,17,53,28,22,75,31,67,15,94,03,80,04,62,16,14,09,53,56,92,16,39,05,42,96,35,31,47,55,58,88,24,00,17,54,24,36,29,85,57,86,56,00,48,35,71,89,07,05,44,44,37,44,60,21,58,51,54,17,58,19,80,81,68,05,94,47,69,28,73,92,13,86,52,17,77,04,89,55,40,04,52,08,83,97,35,99,16,07,97,57,32,16,26,26,79,33,27,98,66,88,36,68,87,57,62,20,72,03,46,33,67,46,55,12,32,63,93,53,69,04,42,16,73,38,25,39,11,24,94,72,18,08,46,29,32,40,62,76,36,20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,04,36,16,20,73,35,29,78,31,90,01,74,31,49,71,48,86,81,16,23,57,05,54,01,70,54,71,83,51,54,69,16,92,33,48,61,43,52,01,89,19,67,48";

    let mut v: Vec<_> = str.split(",").map(|i| i.parse::<u64>().unwrap()).collect();
    let r = group_by(&v, 20);


    let mut max = 0;
    for row in 0..r.len(){
        let cloumns_len = r[row].len();
        for cloumn in 0..cloumns_len{
            if cloumn < cloumns_len - 3 {
                // 左右
                let val = r[row][cloumn] * r[row][cloumn + 1] * r[row][cloumn + 2] * r[row][cloumn + 3];
                if val > max {max = val};
            }

            if row < r.len() - 3 {
                // 上下
                let val = r[row][cloumn] * r[row + 1][cloumn] * r[row + 2][cloumn] * r[row + 3][cloumn];
                if val > max {max = val};

                // 右对角
                if cloumn < cloumns_len - 3{
                    let val = r[row][cloumn] * r[row + 1][cloumn + 1] * r[row + 2][cloumn + 2] * r[row + 3][cloumn + 3];
                    if val > max {max = val};
                }

                // 左对角
                if cloumn > 3{
                    let val = r[row][cloumn] * r[row + 1][cloumn - 1] * r[row + 2][cloumn - 2] * r[row + 3][cloumn - 3];
                    if val > max {max = val};
                }
            }
        }
    }
    max
}

// Problem 12: Highly divisible triangular number
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

//  得到前面的三角数：n * (n + 1) / 2;
fn triangular_number(n: u64) -> u64{
    n * (n + 1) / 2
}

// 找出n的约数（整除因数）个数，如果大于500，则是我们要找的
// 36: 1 2 3 4 6 9 12 18 36
// 遍历法
fn divisor(n: u64) -> bool {
    let mut i = 1;
    let mut sum = 0;
    // 比如遍历到6*6=36就到顶了，此时sum算两个数
    while i*i < n{
        if n % i == 0 { sum += 2}
        i += 1
    }
    // 比如6*6=36
    if i*i == n {sum += 1}
    // println!("{:?}", sum);
    if sum > 500 { true } else { false }
}

pub fn solve() -> u64{
    let mut i = 1;
    let num: u64;
    loop{
        if divisor(triangular_number(i)) {
            num = triangular_number(i);
            break;
        }
        i += 1;
    }
    num
}

// 另一种解法：因子分解算法
// 比如 45= 3^2×5^1，则45可以被3^0 ×5^0，3^0×5^1，3^1×5^0，3^1×5^1，3^2×5^0，和3^2×5^1，或者 1，5，3，9，15，和 45整除
// 对n进行不断自加，找到一个数，里面的所有因子的指数加一 相乘大于500.比如上面的45，其实就是(2 + 1) * (1 + 1) = 6.

/*
problem 13: Large sum

Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
计算下面100个50位数之和的前10位。

37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690


*/
pub fn big_sum() -> String {
    let sum: BigUint = [
        "37107287533902102798797998220837590246510135740250",
        "46376937677490009712648124896970078050417018260538",
        "74324986199524741059474233309513058123726617309629",
        "91942213363574161572522430563301811072406154908250",
        "23067588207539346171171980310421047513778063246676",
        "89261670696623633820136378418383684178734361726757",
        "28112879812849979408065481931592621691275889832738",
        "44274228917432520321923589422876796487670272189318",
        "47451445736001306439091167216856844588711603153276",
        "70386486105843025439939619828917593665686757934951",
        "62176457141856560629502157223196586755079324193331",
        "64906352462741904929101432445813822663347944758178",
        "92575867718337217661963751590579239728245598838407",
        "58203565325359399008402633568948830189458628227828",
        "80181199384826282014278194139940567587151170094390",
        "35398664372827112653829987240784473053190104293586",
        "86515506006295864861532075273371959191420517255829",
        "71693888707715466499115593487603532921714970056938",
        "54370070576826684624621495650076471787294438377604",
        "53282654108756828443191190634694037855217779295145",
        "36123272525000296071075082563815656710885258350721",
        "45876576172410976447339110607218265236877223636045",
        "17423706905851860660448207621209813287860733969412",
        "81142660418086830619328460811191061556940512689692",
        "51934325451728388641918047049293215058642563049483",
        "62467221648435076201727918039944693004732956340691",
        "15732444386908125794514089057706229429197107928209",
        "55037687525678773091862540744969844508330393682126",
        "18336384825330154686196124348767681297534375946515",
        "80386287592878490201521685554828717201219257766954",
        "78182833757993103614740356856449095527097864797581",
        "16726320100436897842553539920931837441497806860984",
        "48403098129077791799088218795327364475675590848030",
        "87086987551392711854517078544161852424320693150332",
        "59959406895756536782107074926966537676326235447210",
        "69793950679652694742597709739166693763042633987085",
        "41052684708299085211399427365734116182760315001271",
        "65378607361501080857009149939512557028198746004375",
        "35829035317434717326932123578154982629742552737307",
        "94953759765105305946966067683156574377167401875275",
        "88902802571733229619176668713819931811048770190271",
        "25267680276078003013678680992525463401061632866526",
        "36270218540497705585629946580636237993140746255962",
        "24074486908231174977792365466257246923322810917141",
        "91430288197103288597806669760892938638285025333403",
        "34413065578016127815921815005561868836468420090470",
        "23053081172816430487623791969842487255036638784583",
        "11487696932154902810424020138335124462181441773470",
        "63783299490636259666498587618221225225512486764533",
        "67720186971698544312419572409913959008952310058822",
        "95548255300263520781532296796249481641953868218774",
        "76085327132285723110424803456124867697064507995236",
        "37774242535411291684276865538926205024910326572967",
        "23701913275725675285653248258265463092207058596522",
        "29798860272258331913126375147341994889534765745501",
        "18495701454879288984856827726077713721403798879715",
        "38298203783031473527721580348144513491373226651381",
        "34829543829199918180278916522431027392251122869539",
        "40957953066405232632538044100059654939159879593635",
        "29746152185502371307642255121183693803580388584903",
        "41698116222072977186158236678424689157993532961922",
        "62467957194401269043877107275048102390895523597457",
        "23189706772547915061505504953922979530901129967519",
        "86188088225875314529584099251203829009407770775672",
        "11306739708304724483816533873502340845647058077308",
        "82959174767140363198008187129011875491310547126581",
        "97623331044818386269515456334926366572897563400500",
        "42846280183517070527831839425882145521227251250327",
        "55121603546981200581762165212827652751691296897789",
        "32238195734329339946437501907836945765883352399886",
        "75506164965184775180738168837861091527357929701337",
        "62177842752192623401942399639168044983993173312731",
        "32924185707147349566916674687634660915035914677504",
        "99518671430235219628894890102423325116913619626622",
        "73267460800591547471830798392868535206946944540724",
        "76841822524674417161514036427982273348055556214818",
        "97142617910342598647204516893989422179826088076852",
        "87783646182799346313767754307809363333018982642090",
        "10848802521674670883215120185883543223812876952786",
        "71329612474782464538636993009049310363619763878039",
        "62184073572399794223406235393808339651327408011116",
        "66627891981488087797941876876144230030984490851411",
        "60661826293682836764744779239180335110989069790714",
        "85786944089552990653640447425576083659976645795096",
        "66024396409905389607120198219976047599490197230297",
        "64913982680032973156037120041377903785566085089252",
        "16730939319872750275468906903707539413042652315011",
        "94809377245048795150954100921645863754710598436791",
        "78639167021187492431995700641917969777599028300699",
        "15368713711936614952811305876380278410754449733078",
        "40789923115535562561142322423255033685442488917353",
        "44889911501440648020369068063960672322193204149535",
        "41503128880339536053299340368006977710650566631954",
        "81234880673210146739058568557934581403627822703280",
        "82616570773948327592232845941706525094512325230608",
        "22918802058777319719839450180888072429661980811197",
        "77158542502016545090413245809786882778948721859617",
        "72107838435069186155435662884062257473692284509516",
        "20849603980134001723930671666823555245252804609722",
        "53503534226472524250874054075591789781264330331690",
    ].iter()
    .map(|&x| x.parse::<BigUint>().unwrap())
    .fold("0".parse::<BigUint>().unwrap(), |acc, cur| acc + cur);
    let string_sum = format!("{}", sum);
    let mut first_10 = "0";
    unsafe {
        println!("{}", string_sum.slice_unchecked(0, 10));
        first_10 = string_sum.slice_unchecked(0, 10);
    }
    first_10.into()
}


/*
Problem 14: Longest Collatz sequence

The following iterative sequence is defined for the set of positive integers:

n → n/2 (n is even)
n → 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following sequence:

13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

Which starting number, under one million, produces the longest chain?

NOTE: Once the chain starts the terms are allowed to go above one million.


http://pe-cn.github.io/14/

## 最长考拉兹序列

在正整数集上定义如下的迭代序列：

n → n/2 （若n为偶数）
n → 3n + 1 （若n为奇数）

从13开始应用上述规则，我们可以生成如下的序列：

13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
可以看出这个序列（从13开始到1结束）共有10项。尽管还没有被证明，但我们普遍认为，从任何数开始最终都能迭代至1（“考拉兹猜想”）。

从小于一百万的哪个数开始，能够生成最长的序列呢？

注： 序列开始生成后允许其中的项超过一百万。


按「算法」的严格定义，求最长考拉兹序列的算法不是严格意义上的算法，因为缺乏有穷性证明。
*/

struct Collatz {
    i: u64
}

impl Collatz {
    fn new(starting_point: u64) -> Collatz {
        Collatz { i: starting_point }
    }
}

impl Iterator for Collatz {
    type Item = u64;

    fn next(&mut self) -> Option<Self::Item> {
        if self.i == 0 {
            return None;
        }

        let current = self.i;

        self.i = match self.i {
            1 => 0,
            _ => match self.i & 1 {
                0 => self.i / 2,
                _ => 3 * self.i + 1
            }
        };

        Some(current)
    }
}

// 性能不太好，还可以通过减少重复计算来进行优化
pub fn longest_collatz_sequence_1() -> u64 {
    let max = 1_000_000;
    let mut c: Vec<Vec<u64>> = (1..max).map(|x| Collatz::new(x).collect()).collect();
    c.sort_by(|a, b| b.len().cmp(&a.len()));
    println!("The Collatz Sequence with the longest sequence under {} is {} with sequence length of: {}", max, c[0][0], c[0].len());
    c[0][0]
}
